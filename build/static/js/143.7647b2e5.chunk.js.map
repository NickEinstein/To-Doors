{"version":3,"file":"static/js/143.7647b2e5.chunk.js","mappings":"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","sources":["common/LoginHeader.js","common/PasswordTextField.js","features/home/Home.js","utils/FormikUtils.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import trustedBy1 from './images/Vector.png'\r\nimport toDoorLogo from 'images/ToDoorLogisticsLogo.png'\r\nimport trustedBy3 from '../images/Rectangle 78.png'\r\n// import trustedBy3 from './images/trustedBy-3.png'\r\n// import trustedBy4 from './images/trustedBy-4.png'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, Input, MenuItem, Select, TextField, Typography } from '@mui/material';\r\n\r\n\r\nconst LoginHeader = (prop) => {\r\n    const history = useNavigate();\r\n    const redirect = ()=>{\r\n//   localStorage.setItem('auth', null)\r\n      history('/');\r\n  }\r\n    return (\r\n      <div className=\"flex \">\r\n        <div className=\"flex items-center\">\r\n          <div className=\"flex relative items-center\">\r\n            <img\r\n              src={toDoorLogo}\r\n              alt=\"softwork logo\"\r\n              className=\"cursor-pointer w-36\"\r\n              onClick={redirect}\r\n            />\r\n           \r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n}\r\nexport default LoginHeader;\r\n","import React from \"react\";\nimport { IconButton, InputAdornment, TextField, Icon } from \"@mui/material\";\nimport clsx from \"clsx\";\n\n/** @param {import(\"@mui/material\").TextFieldProps} props */\nfunction PasswordTextField(props) {\n  const { error, ...rest } = props;\n  const [isVisible, setVisible] = React.useState(false);\n  const handleVisible = React.useCallback(() => setVisible((p) => !p), []);\n\n  return (\n    <TextField\n      type={isVisible ? \"text\" : \"password\"}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleVisible}\n              disabled={props.disabled}\n            >\n              <Icon className={clsx(error ? \"text-danger\" : \"text-primary\")}>\n                {isVisible ? \"visibility_off\" : \"visibility\"}\n              </Icon>\n            </IconButton>\n          </InputAdornment>\n        ),\n      }}\n      error={error}\n      {...rest}\n    />\n  );\n}\n\nexport default PasswordTextField;\n","\nimport React, { useState } from 'react';\nimport UserApi from \"apis/UserApi\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { useSnackbar } from \"notistack\";\n\nimport { FcGoogle } from 'react-icons/fc';\n// import { Button, TextField, Typography } from \"@mui/material\";\nimport PasswordTextField from \"common/PasswordTextField\";\nimport { getTextFieldFormikProps } from \"utils/FormikUtils\";\nimport useAuthUser from \"hooks/useAuthUser\";\nimport { Navigate } from \"react-router-dom\";\nimport { RouteEnum } from \"constants/RouteConstants\";\nimport LoginHeader from 'common/LoginHeader';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport toDoorLogo from 'images/Ellipse 30.png'\nimport background from 'images/background.png'\nimport snake from 'images/Mask group.png'\n\n// import ReactDOM from 'react-dom';\n// import trustedBy1 from './images/Vector.png'\nimport trustedBy2 from 'images/Rectangle 7.png'\nimport trustedBy3 from 'images/Rectangle 106.png'\n// import LoginHeader from './LoginHeader';\n// import trustedBy3 from './images/trustedBy-3.png'\n// import trustedBy4 from './images/trustedBy-4.png'\nimport { Button, Input, MenuItem, Select, TextField, Typography } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Home(props) {\n  const [age, setAge] = React.useState('');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n    console.log(event)\n  };\n\n  // console.log(localStorage.getItem('authUser'))\n  const history = useNavigate();\n\n\n  const redirect = () => {\n    // localStorage.setItem('authUser', 'true')\n\n    history('/dashboard');\n  }\n\n  // console.log(localStorage.getItem('authUser'))\n\n  // const authUser = useAuthUser();\n\n  const { enqueueSnackbar } = useSnackbar();\n  const [loginMuation, loginMutationResult] = UserApi.useLoginMutation();\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      phoneNo: \"\",\n      password: \"\",\n      userType: \"admin\",\n    },\n\n    validationSchema: yup.object({\n      email: yup.string().trim().required(),\n      password: yup.string().trim().required(),\n    }),\n    onSubmit: async (values) => {\n      console.log(values);\n      localStorage.setItem(\"il\", true);\n      // redirect();\n      // history('/dashboard')\n\n      try {\n        const data = await loginMuation({ data: values }).unwrap();\n        // TODO extra login\n        console.log(data.data)\n        enqueueSnackbar(\"Logged in successful\", { variant: \"success\" });\n        redirect();\n      } catch (error) {\n        enqueueSnackbar(error?.data?.message, \"Failed to login\", {\n          variant: \"error\",\n        });\n      }\n    },\n  });\n\n  return (\n   \n    <div className=\" w-full pl-16\">\n      <div className=\"flex justify-between\">\n        <div className=\"pt-4 w-2/5\">\n          <div className=\"flex flex-col w-full h-full  \">\n            <LoginHeader />\n\n            <div className=\"w-full h-full\">\n              <div className=\"my-8\">\n                <Typography variant=\"h3\" className=\"font-bold\">\n                  Sign In\n                </Typography>\n                {/* <p>Enter your credentials to create your account.</p> */}\n              </div>\n              <form onSubmit={formik.handleSubmit}>\n                <Typography variant=\"h6\" className=\"mb-2\">\n                  Email Address\n                </Typography>\n                <TextField\n                  size=\"medium\"\n                  className=\"w-full\"\n                  placeholder=\"Enter your email\"\n                  // onChange={handleChange}\n                  //     onChange={(e)=>{\n                  //   alert('k')\n                  //   // console.log(e)\n                  //   // localStorage.setItem ('location', e.target.value)\n                  // }}\n                  name=\"email\"\n                  {...getTextFieldFormikProps(formik, \"email\")}\n                />\n                <Typography variant=\"h6\" className=\"mt-10 mb-2\">\n                  Choose Password\n                </Typography>\n                <PasswordTextField\n                  className=\"w-full \"\n                  placeholder=\"Enter your Password\"\n                  // type=\"password\"\n                  // onChange={handleChange}\n                  //     onChange={(e)=>{\n                  //   alert('k')\n                  //   // console.log(e)\n                  //   // localStorage.setItem ('password', e.target.value)\n                  // }}\n                  name=\"password\"\n                  {...getTextFieldFormikProps(formik, \"password\")}\n                />\n                <FormGroup>\n                  <FormControlLabel\n                    className=\"mt-5\"\n                    control={<Checkbox defaultChecked />}\n                    label=\"Remember Information\"\n                  />\n                </FormGroup>\n                {/* <Input placeholder='Location' className='m-b-20'/> */}\n                <div className=\"text-white m-b-30 mt-5  \">\n                  <Button\n                    className=\"p-3 w-full text-base\"\n                    type=\"submit\"\n                    // onClick={() => localStorage.setItem('type', 'CLIENT')}\n                    // className=' '\n                  >\n                    Sign In\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<FcGoogle />}\n                    className=\"p-3 bg-white text-base text-black mt-4 w-full\"\n                    type=\"submit\"\n                    // onClick={() => localStorage.setItem('type', 'CLIENT')}\n                    // className=' '\n                  >\n                    Sign In With Google\n                  </Button>\n                </div>\n              </form>\n              {/* <a className=\"text-center \" href=\"\">\n                <h2 className=\"\">\n                  Already have an account?\n                  <b className=\"ml-1  color{#039836}\">Sign In</b>\n                </h2>\n              </a> */}\n            </div>\n          </div>\n        </div>\n        <div\n          className=\"relative min-h-screen  flex flex-col items-stretch bg-primary-main text-white p-10 justify-center w-2/5\"\n          style={{\n            position: \"relative\",\n            backgroundImage: `url('${snake}')`,\n          }}\n        >\n          {/* <img\n            className=\"relative w-[100%] h-[100%]\"\n            src={snake}\n          /> */}\n          <div className=\"z-10 mx-auto\">\n            <Typography variant=\"h1\" className=\" font-bold\">\n              {/* Earn */}\n              Admin\n            </Typography>\n            <Typography variant=\"h1\" className=\"mt-10 font-bold\">\n              {/* Ride */}\n              Dashboard\n            </Typography>\n          </div>\n          {/* <Typography variant='h1' className='mt-10 font-bold'>Manage.</Typography> */}\n\n          {/* background:`url(${background})` */}\n          {/* <div className='two-circles relative' style={{ position: 'relative' }}></div> */}\n          {/* <img src={trustedBy3} className='' style={{ position: 'absolute', top: '50%', height: '49%', width: '98.8%' }} /> */}\n          {/* <div className='' style={{width:'100px', height:'50px', ottomLeftRadius:'100%',ottomRightRadius:'100%', position:'absolute', bottom:'0px', opColor:'blue'}}></div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","/**\n * \n * @param {*} formik \n * @param {*} key \n * @returns \n */\nexport function getTextFieldFormikProps(formik, key) {\n  return {\n    ...formik.getFieldProps(key),\n    error: !!formik.touched?.[key] && !!formik.errors?.[key],\n    helperText: !!formik.touched?.[key] && formik.errors?.[key],\n    focused: formik.values?.[key],\n  };\n}\n\nexport function getCheckFieldFormikProps(\n  formik,\n  key,\n  checkedValue = true\n  // unCheckedValue = false\n) {\n  const textFieldProps = getTextFieldFormikProps(formik, key);\n  // if (key === \"allowAttributeConfiguration\") {\n  //   console.log(textFieldProps.value);\n  // }\n  const value =\n    typeof checkedValue === \"boolean\"\n      ? !!textFieldProps.value\n      : textFieldProps.value;\n  return {\n    ...textFieldProps,\n    value: value,\n    checked: value === checkedValue,\n  };\n  // return {\n  //   checked: !!formik.values[key],\n  //   onChange: (e) => formik.setFieldValue(key, e.target.checked),\n  // };\n}\n"],"names":["prop","history","useNavigate","className","src","toDoorLogo","alt","onClick","props","error","rest","React","isVisible","setVisible","handleVisible","p","type","InputProps","endAdornment","position","disabled","clsx","enqueueSnackbar","useSnackbar","UserApi","loginMuation","formik","useFormik","initialValues","email","phoneNo","password","userType","validationSchema","yup","trim","required","onSubmit","values","console","log","localStorage","setItem","data","unwrap","variant","message","handleSubmit","size","placeholder","name","getTextFieldFormikProps","control","defaultChecked","label","startIcon","style","backgroundImage","snake","key","getFieldProps","touched","errors","helperText","focused"],"sourceRoot":""}